#!/usr/bin/env node

var _ = require("underscore");
var program = require("commander");
var tisdk = require("../index");
var ProgressBar = require("progress");
var chalk = require("chalk");
var fs = require("fs");
var path = require("path");
var AdmZip = require("adm-zip");
var request = require("request");
var os =  require('os');

var TITANIUM = path.join(process.env.HOME, 'Library', 'Application Support', 'Titanium');
var platform = "osx";

if (os.platform()=="linux"){
  TITANIUM = path.join(process.env.HOME, '.titanium');
  platform = "linux";
}

program
.version(require("../package.json").version);

program
.command("list")
.option("-g, --ga-only", "List GA releases only")
.description("List available GA releases")
.action(function(o) {
  tisdk.getGATags(function(tags) {
    tags.map(function(tag) {
      var version = tag.name.replace(/_/g, ".");
      var type = version.split(".")[3];
      if (type==="GA") {
        console.log(chalk.bold.green(version));
      } else if (!o.gaOnly) {
        console.log(version);
      }
    });
  });
});

program
.description("Install a GA version")
.command("install [version]")
.action(function(_version) {
  var version = _version.replace(/\./g, "_");
  tisdk.getGATags(function(tags) {
    var tag = _.find(tags, function(tag) {
      return tag.name === version;
    });
    if (!tag) {
      console.error("Invalid GA Version: use the `tisdk list` command");
      return;
    }
    var nightly = tag.name.split("_").splice(0,2).join("_") + "_" + "X";

    tisdk.getNightlies(nightly, function(list) {
      var build = _.find(list, function(t) { return t.git_revision === tag.commit.sha;});
      if (!build) {
        console.error("Build not available.");
        return;
      }
      var tmp_file = "mobilesdk-" + _version + "-"+platform+".zip";
      var file = fs.createWriteStream(tmp_file);
      var filename = build.filename;
      if (platform=="linux"){
        filename = filename.replace(/osx/g,"linux");
      }

      var req = request.get("http://builds.appcelerator.com/mobile/" + nightly + "/" + filename);

      req.pipe(file);
      req.on('response', function(req) {
        var bar = new ProgressBar('Downloading... [:bar] :percent :etas', {
          complete: '=',
          incomplete: ' ',
          width: 40,
          total: parseInt(req.headers['content-length'])
        });
        req.on('data', function(buffer) {
          bar.tick(buffer.length);
        });
      });
      file.on('finish', function() {
        file.close();
        console.log("Unzipping...");
        var zip = new AdmZip(tmp_file);
        zip.extractAllTo(TITANIUM);
        fs.renameSync(
          path.join(TITANIUM, "mobilesdk", platform, build.filename.split("-")[1]),
          path.join(TITANIUM, "mobilesdk", platform, _version)
        );
        fs.unlinkSync(tmp_file);
        console.log("Installed Successfully!");
      });
    });
  });

});


program.parse(process.argv);
if (program.args.length === 0 || typeof program.args[program.args.length -1] === 'string'){
    program.help();
  }
